/* Delete the tables if they already exist */
drop table if exists Highschooler;
drop table if exists Friend;
drop table if exists Likes;

/* Create the schema for our tables */
create table Highschooler(ID int, name text, grade int);
create table Friend(ID1 int, ID2 int);
create table Likes(ID1 int, ID2 int);

/* Populate the tables with our data */
insert into Highschooler values (1510, 'Jordan', 9);
insert into Highschooler values (1689, 'Gabriel', 9);
insert into Highschooler values (1381, 'Tiffany', 9);
insert into Highschooler values (1709, 'Cassandra', 9);
insert into Highschooler values (1101, 'Haley', 10);
insert into Highschooler values (1782, 'Andrew', 10);
insert into Highschooler values (1468, 'Kris', 10);
insert into Highschooler values (1641, 'Brittany', 10);
insert into Highschooler values (1247, 'Alexis', 11);
insert into Highschooler values (1316, 'Austin', 11);
insert into Highschooler values (1911, 'Gabriel', 11);
insert into Highschooler values (1501, 'Jessica', 11);
insert into Highschooler values (1304, 'Jordan', 12);
insert into Highschooler values (1025, 'John', 12);
insert into Highschooler values (1934, 'Kyle', 12);
insert into Highschooler values (1661, 'Logan', 12);

insert into Friend values (1510, 1381);
insert into Friend values (1510, 1689);
insert into Friend values (1689, 1709);
insert into Friend values (1381, 1247);
insert into Friend values (1709, 1247);
insert into Friend values (1689, 1782);
insert into Friend values (1782, 1468);
insert into Friend values (1782, 1316);
insert into Friend values (1782, 1304);
insert into Friend values (1468, 1101);
insert into Friend values (1468, 1641);
insert into Friend values (1101, 1641);
insert into Friend values (1247, 1911);
insert into Friend values (1247, 1501);
insert into Friend values (1911, 1501);
insert into Friend values (1501, 1934);
insert into Friend values (1316, 1934);
insert into Friend values (1934, 1304);
insert into Friend values (1304, 1661);
insert into Friend values (1661, 1025);
insert into Friend select ID2, ID1 from Friend;

insert into Likes values(1689, 1709);
insert into Likes values(1709, 1689);
insert into Likes values(1782, 1709);
insert into Likes values(1911, 1247);
insert into Likes values(1247, 1468);
insert into Likes values(1641, 1468);
insert into Likes values(1316, 1304);
insert into Likes values(1501, 1934);
insert into Likes values(1934, 1501);
insert into Likes values(1025, 1101);

/*1.Find the names of all students who are friends with someone named Gabriel*/
select name from highschooler where id in
(select id1 from friend where id2 in (select id from highschooler where name='Gabriel'));
name
Jordan
Cassandra
Andrew
Alexis
Jessica

/*2.For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name 
and grade of the student they like.*/
select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join likes l on l.id1=h1.id join highschooler h2 on h2.id=l.id2
where (h1.grade-h2.grade)>=2;
name  grade    name:1  grade1
John	12	Haley	10

/*3.For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with 
the two names in alphabetical order*/
select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join likes l on l.id1=h1.id join highschooler h2 on h2.id=l.id2
join likes l1 on h2.id=l1.id1 where l.id1=l1.id2 and l1.id1=l.id2 and h1.name<h2.name order by h1.name,h2.name;
name          grade    name:1    grade:1
Cassandra	 9     Gabriel	    9
Jessica	        11	Kyle	   12

/*4.Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort 
by grade, then by name within each grade.*/
select name,grade from highschooler where id not in (select id2 from likes) and id not in (select id1 from likes) order by grade,name; 
name    grade
Jordan	9
Tiffany	9
Logan	12

/*5.For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as 
an ID1 in the Likes table), return A and B's names and grades*/
select h1.name,h1.grade,h2.name,h2.grade from highschooler h1 join highschooler h2 where (h1.id,h2.id) in
(select id1,id2 from likes where id2 not in (select id1 from likes));
name      grade   name:1  grade:1
Brittany   10	   Kris     10
Alexis	   11	   Kris	    10
Austin	   11	  Jordan    12
John	   12	   Haley    10

/*6.Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within 
each grade.*/
select name,grade from highschooler h1 where id not in (select id1 from friend f join highschooler h2 on 
f.id2=h2.id where h1.id=f.id1 and  h1.grade<>h2.grade) order by grade,name;
name     grade
Jordan	   9
Brittany  10
Haley	  10
Kris	  10
Gabriel	  11
John	  12
Logan	  12

/*7.For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!).
 For all such trios, return the name and grade of A, B, and C*/
select distinct H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade from Highschooler H1, Highschooler H2, Highschooler H3, Likes L, 
Friend F1, Friend F2 where (H1.id = L.id1 and H2.id = L.id2) and H2.id not in (select id2 from Friend where id1 = H1.id) and (H1.id = F1.id1 
and H3.id = F1.id2) and (H2.id = F2.id1 and H3.id = F2.id2);
name    grade    name:1   grade:1   name:2    grade:2
Andrew	 10	Cassandra    9	    Gabriel	9
Austin	 11	Jordan	    12	    Andrew	10
Austin	 11	Jordan	    12	    Kyle	12

/*8.Find the difference between the number of students in the school and the number of different first names.*/
select (count(*)-count(distinct name)) diff from highschooler;
diff
2

/*9.Find the name and grade of all students who are liked by more than one other student*/
select name,grade from highschooler where id in (select id2 from likes group by id2 having count(id2)>1);
name       grade
Cassandra    9
Kris	     10

/*10.For every situation where student A likes student B, but student B likes a different student C, return the names and grades of A, B, and C*/
select h1.name,h1.grade,h2.name,h2.grade,h3.name,h3.grade from highschooler h1 join likes l1 on l1.id1=h1.id join highschooler h2 on h2.id=l1.id2
join likes l2 on l2.id1=h2.id join highschooler h3 on h3.id=l2.id2 where l1.id2=l2.id1 and h1.id<>h3.id;
name   grade    name:1     grade:1      name:2   grade:2
Andrew	10	Cassandra	9	Gabriel	   9
Gabriel	11	Alexis	       11	Kris	  10

/*11.Find those students for whom all of their friends are in different grades from themselves. Return the students' names and grades*/
select h.name,h.grade from highschooler h where grade not in (select h1.grade from friend f join highschooler h1 on h.id=f.id1 
where h1.id=f.id2);
name   grade
Austin	11

/*12.What is the average number of friends per student*/
select avg(num) from (select count(*) num from friend group by id1);
avg(num)
2.5

/*13.Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, 
even though technically she is a friend of a friend*/
select count(id1) friends_of_Cassandra from friend where id2 in (select id1 from friend where id2 =
(select id from highschooler where name="Cassandra")) ;
friends_of_Cassandra
7

/*14.Find the name and grade of the student(s) with the greatest number of friends*/
select name,grade from highschooler h join friend f on f.id1=h.id group by id1 having count(*)=(select max(count) from 
(select count(id1) count from friend group by id1));
name   grade
Alexis	11
Andrew	10



select * from highschooler;
select * from friend;
select * from likes;

